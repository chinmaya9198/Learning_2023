level. 1
1.
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Student {
    int rollno;
    char name[20];
    float marks;
};

void parseString(const char *input, struct Student *students, int numStudents);
void printStudentInfo(const struct Student *students, int numStudents);

int main() {
    int numStudents;
    printf("Enter the number of students: ");
    scanf("%d", &numStudents);

    // Clear the input buffer
    while (getchar() != '\n')
        ;

    struct Student *students = (struct Student *)malloc(numStudents * sizeof(struct Student));

    if (students == NULL) {
        printf("Memory allocation failed!\n");
        return 1;
    }

    char input[100];
    printf("Enter student details (rollno name marks):\n");
    for (int i = 0; i < numStudents; i++) {
        printf("Student %d: ", i + 1);
        fgets(input, sizeof(input), stdin);

        // Remove the trailing newline character
        input[strcspn(input, "\n")] = '\0';

        parseString(input, &students[i], 1);
    }

    printStudentInfo(students, numStudents);

    free(students);

    return 0;
}

void parseString(const char *input, struct Student *students, int numStudents) {
    sscanf(input, "%d %s %f", &students->rollno, students->name, &students->marks);
}

void printStudentInfo(const struct Student *students, int numStudents) {
    printf("\nStudent Information:\n");
    printf("----------------------\n");

    for (int i = 0; i < numStudents; i++) {
        printf("Student %d:\n", i + 1);
        printf("Roll No: %d\n", students[i].rollno);
        printf("Name: %s\n", students[i].name);
        printf("Marks: %.2f\n", students[i].marks);
        printf("----------------------\n");
    }
}

2.
#include <stdio.h>
#include <string.h>

struct Student {
    int rollno;
    char name[20];
    float marks;
};

void initializeStudents(struct Student *students, int numStudents);

int main() {
    int numStudents;
    printf("Enter the number of students: ");
    scanf("%d", &numStudents);

    struct Student students[numStudents];

    initializeStudents(students, numStudents);

    printf("\nStudent Information:\n");
    printf("----------------------\n");
    for (int i = 0; i < numStudents; i++) {
        printf("Student %d:\n", i + 1);
        printf("Roll No: %d\n", students[i].rollno);
        printf("Name: %s\n", students[i].name);
        printf("Marks: %.2f\n", students[i].marks);
        printf("----------------------\n");
    }

    return 0;
}

void initializeStudents(struct Student *students, int numStudents) {
    for (int i = 0; i < numStudents; i++) {
        students[i].rollno = i + 1;
        strcpy(students[i].name, "Unknown");
        students[i].marks = 0.0;
    }
}

3.
#include <stdio.h>
#include <string.h>

struct Student {
    int rollno;
    char name[20];
    float marks;
};

void displayStudents(const struct Student *students, int numStudents);

int main() {
    int numStudents;
    printf("Enter the number of students: ");
    scanf("%d", &numStudents);

    struct Student students[numStudents];

    printf("Enter student details:\n");
    for (int i = 0; i < numStudents; i++) {
        printf("Student %d:\n", i + 1);
        printf("Roll No: ");
        scanf("%d", &students[i].rollno);
        printf("Name: ");
        scanf("%s", students[i].name);
        printf("Marks: ");
        scanf("%f", &students[i].marks);
    }

    displayStudents(students, numStudents);

    return 0;
}

void displayStudents(const struct Student *students, int numStudents) {
    printf("\nStudent Information:\n");
    printf("----------------------\n");
    for (int i = 0; i < numStudents; i++) {
        printf("Student %d:\n", i + 1);
        printf("Roll No: %d\n", students[i].rollno);
        printf("Name: %s\n", students[i].name);
        printf("Marks: %.2f\n", students[i].marks);
        printf("----------------------\n");
    }
}

4.
#include <stdio.h>
#include <string.h>

struct Student {
    int rollno;
    char name[20];
    float marks;
};

void sortStudents(struct Student *students, int numStudents);
void swap(struct Student *a, struct Student *b);
void displayStudents(const struct Student *students, int numStudents);

int main() {
    int numStudents;
    printf("Enter the number of students: ");
    scanf("%d", &numStudents);

    struct Student students[numStudents];

    printf("Enter student details:\n");
    for (int i = 0; i < numStudents; i++) {
        printf("Student %d:\n", i + 1);
        printf("Roll No: ");
        scanf("%d", &students[i].rollno);
        printf("Name: ");
        scanf("%s", students[i].name);
        printf("Marks: ");
        scanf("%f", &students[i].marks);
    }

    sortStudents(students, numStudents);

    printf("\nSorted Student Information:\n");
    printf("-----------------------------\n");
    displayStudents(students, numStudents);

    return 0;
}

void sortStudents(struct Student *students, int numStudents) {
    for (int i = 0; i < numStudents - 1; i++) {
        for (int j = 0; j < numStudents - i - 1; j++) {
            if (students[j].marks < students[j + 1].marks) {
                swap(&students[j], &students[j + 1]);
            }
        }
    }
}

void swap(struct Student *a, struct Student *b) {
    struct Student temp = *a;
    *a = *b;
    *b = temp;
}

void displayStudents(const struct Student *students, int numStudents) {
    for (int i = 0; i < numStudents; i++) {
        printf("Student %d:\n", i + 1);
        printf("Roll No: %d\n", students[i].rollno);
        printf("Name: %s\n", students[i].name);
        printf("Marks: %.2f\n", students[i].marks);
        printf("----------------------\n");
    }
}

5.
#include <stdio.h>
#include <string.h>

struct Student {
    int rollno;
    char name[20];
    float marks;
};

int searchStudent(const struct Student *students, int numStudents, const char *searchName);

int main() {
    int numStudents;
    printf("Enter the number of students: ");
    scanf("%d", &numStudents);

    struct Student students[numStudents];

    printf("Enter student details:\n");
    for (int i = 0; i < numStudents; i++) {
        printf("Student %d:\n", i + 1);
        printf("Roll No: ");
        scanf("%d", &students[i].rollno);
        printf("Name: ");
        scanf("%s", students[i].name);
        printf("Marks: ");
        scanf("%f", &students[i].marks);
    }

    char searchName[20];
    printf("Enter the name to search: ");
    scanf("%s", searchName);

    int index = searchStudent(students, numStudents, searchName);

    if (index != -1) {
        printf("\nStudent Found!\n");
        printf("Roll No: %d\n", students[index].rollno);
        printf("Name: %s\n", students[index].name);
        printf("Marks: %.2f\n", students[index].marks);
    } else {
        printf("\nStudent Not Found!\n");
    }

    return 0;
}

int searchStudent(const struct Student *students, int numStudents, const char *searchName) {
    for (int i = 0; i < numStudents; i++) {
        if (strcmp(students[i].name, searchName) == 0) {
            return i;  // Return the index if the name matches
        }
    }
    return -1;  // Return -1 if the name is not found
}

level 2.
1.
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Student {
    int rollno;
    char name[20];
    float marks;
};

struct Student* addStudent(struct Student* students, int* numStudents);
void displayStudents(const struct Student* students, int numStudents);

int main() {
    int numStudents = 0;
    struct Student* students = NULL;

    printf("Adding Students to Array of Structures\n");

    while (1) {
        printf("\n");
        printf("1. Add a Student\n");
        printf("2. Display Students\n");
        printf("3. Exit\n");
        printf("Enter your choice: ");

        int choice;
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                students = addStudent(students, &numStudents);
                break;
            case 2:
                displayStudents(students, numStudents);
                break;
            case 3:
                free(students);  // Free the dynamically allocated memory
                return 0;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}

struct Student* addStudent(struct Student* students, int* numStudents) {
    (*numStudents)++;  // Increment the number of students

    // Reallocate memory to accommodate the new student
    students = (struct Student*)realloc(students, (*numStudents) * sizeof(struct Student));

    // Check if memory allocation was successful
    if (students == NULL) {
        printf("Memory allocation failed. Exiting program.\n");
        exit(1);
    }

    struct Student newStudent;

    printf("Enter Student Details:\n");
    printf("Roll No: ");
    scanf("%d", &newStudent.rollno);
    printf("Name: ");
    scanf("%s", newStudent.name);
    printf("Marks: ");
    scanf("%f", &newStudent.marks);

    // Add the new student at the end of the array
    students[*numStudents - 1] = newStudent;

    printf("Student added successfully!\n");

    return students;
}

void displayStudents(const struct Student* students, int numStudents) {
    printf("\nStudent Information:\n");
    printf("----------------------\n");

    for (int i = 0; i < numStudents; i++) {
        printf("Student %d:\n", i + 1);
        printf("Roll No: %d\n", students[i].rollno);
        printf("Name: %s\n", students[i].name);
        printf("Marks: %.2f\n", students[i].marks);
        printf("----------------------\n");
    }
}

2.
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Student {
    int rollno;
    char name[20];
    float marks;
};

struct Student* deleteStudent(struct Student* students, int* numStudents);
void displayStudents(const struct Student* students, int numStudents);

int main() {
    int numStudents = 0;
    struct Student* students = NULL;

    printf("Deleting Students from Array of Structures\n");

    while (1) {
        printf("\n");
        printf("1. Add a Student\n");
        printf("2. Delete a Student\n");
        printf("3. Display Students\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");

        int choice;
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                students = addStudent(students, &numStudents);
                break;
            case 2:
                students = deleteStudent(students, &numStudents);
                break;
            case 3:
                displayStudents(students, numStudents);
                break;
            case 4:
                free(students);  // Free the dynamically allocated memory
                return 0;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}

struct Student* deleteStudent(struct Student* students, int* numStudents) {
    if (*numStudents == 0) {
        printf("No students to delete.\n");
        return students;
    }

    (*numStudents)--;  // Decrement the number of students

    // Shift the array elements to overwrite the deleted student
    for (int i = 0; i < *numStudents; i++) {
        students[i] = students[i + 1];
    }

    // Reallocate memory to adjust the array size
    students = (struct Student*)realloc(students, (*numStudents) * sizeof(struct Student));

    // Check if memory reallocation was successful
    if (students == NULL && *numStudents > 0) {
        printf("Memory reallocation failed. Exiting program.\n");
        exit(1);
    }

    printf("Student deleted successfully!\n");

    return students;
}

void displayStudents(const struct Student* students, int numStudents) {
    printf("\nStudent Information:\n");
    printf("----------------------\n");

    for (int i = 0; i < numStudents; i++) {
        printf("Student %d:\n", i + 1);
        printf("Roll No: %d\n", students[i].rollno);
        printf("Name: %s\n", students[i].name);
        printf("Marks: %.2f\n", students[i].marks);
        printf("----------------------\n");
    }
}

3.
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Student {
    int rollno;
    char name[20];
    float marks;
};

void swapStudents(struct Student* students, int index1, int index2);
void displayStudents(const struct Student* students, int numStudents);

int main() {
    int numStudents = 0;
    struct Student* students = NULL;

    printf("Swapping Students in Array of Structures\n");

    while (1) {
        printf("\n");
        printf("1. Add a Student\n");
        printf("2. Swap Students\n");
        printf("3. Display Students\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");

        int choice;
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                students = addStudent(students, &numStudents);
                break;
            case 2:
                swapStudentsMenu(students, numStudents);
                break;
            case 3:
                displayStudents(students, numStudents);
                break;
            case 4:
                free(students);  // Free the dynamically allocated memory
                return 0;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}

void swapStudents(struct Student* students, int index1, int index2) {
    if (index1 == index2) {
        printf("Indexes are the same. No swap performed.\n");
        return;
    }

    struct Student temp = students[index1];
    students[index1] = students[index2];
    students[index2] = temp;

    printf("Students swapped successfully!\n");
}

void swapStudentsMenu(struct Student* students, int numStudents) {
    if (numStudents < 2) {
        printf("Insufficient number of students to perform a swap.\n");
        return;
    }

    printf("Enter the indexes of the students to swap (starting from 0):\n");
    int index1, index2;
    printf("Index 1: ");
    scanf("%d", &index1);
    printf("Index 2: ");
    scanf("%d", &index2);

    if (index1 < 0 || index1 >= numStudents || index2 < 0 || index2 >= numStudents) {
        printf("Invalid indexes. Swap operation aborted.\n");
        return;
    }

    swapStudents(students, index1, index2);
}

void displayStudents(const struct Student* students, int numStudents) {
    printf("\nStudent Information:\n");
    printf("----------------------\n");

    for (int i = 0; i < numStudents; i++) {
        printf("Student %d:\n", i + 1);
        printf("Roll No: %d\n", students[i].rollno);
        printf("Name: %s\n", students[i].name);
        printf("Marks: %.2f\n", students[i].marks);
        printf("----------------------\n");
    }
}

4.
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Student {
    int rollno;
    char name[20];
    float marks;
};

void rotateStudents(struct Student* students, int numStudents, int K);
void displayStudents(const struct Student* students, int numStudents);

int main() {
    int numStudents = 0;
    struct Student* students = NULL;

    printf("Rotating Array of Structures\n");

    while (1) {
        printf("\n");
        printf("1. Add a Student\n");
        printf("2. Rotate Students\n");
        printf("3. Display Students\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");

        int choice;
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                students = addStudent(students, &numStudents);
                break;
            case 2:
                rotateStudentsMenu(students, numStudents);
                break;
            case 3:
                displayStudents(students, numStudents);
                break;
            case 4:
                free(students);  // Free the dynamically allocated memory
                return 0;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}

void rotateStudents(struct Student* students, int numStudents, int K) {
    K = K % numStudents;  // Normalize K if it exceeds the number of students

    // Allocate temporary memory for the rotated array
    struct Student* temp = (struct Student*)malloc(numStudents * sizeof(struct Student));

    // Copy the elements to the temporary array after rotation
    for (int i = 0; i < numStudents; i++) {
        int newIndex = (i + K) % numStudents;
        temp[newIndex] = students[i];
    }

    // Copy the rotated array back to the original array
    for (int i = 0; i < numStudents; i++) {
        students[i] = temp[i];
    }

    free(temp);  // Free the temporary memory

    printf("Students rotated successfully!\n");
}

void rotateStudentsMenu(struct Student* students, int numStudents) {
    if (numStudents < 2) {
        printf("Insufficient number of students to perform a rotation.\n");
        return;
    }

    printf("Enter the number of positions to rotate: ");
    int K;
    scanf("%d", &K);

    rotateStudents(students, numStudents, K);
}

void displayStudents(const struct Student* students, int numStudents) {
    printf("\nStudent Information:\n");
    printf("----------------------\n");

    for (int i = 0; i < numStudents; i++) {
        printf("Student %d:\n", i + 1);
        printf("Roll No: %d\n", students[i].rollno);
        printf("Name: %s\n", students[i].name);
        printf("Marks: %.2f\n", students[i].marks);
        printf("----------------------\n");
    }
}



   