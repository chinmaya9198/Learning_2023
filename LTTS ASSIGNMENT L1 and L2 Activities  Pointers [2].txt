level 1
1.
#include <stdio.h>

void print_exponent(double num) {
    unsigned long long *ptr = (unsigned long long *)&num;
    unsigned long long exponent = (*ptr >> 52) & 0x7FF;

    printf("Exponent in hexadecimal: 0x%llX\n", exponent);
    printf("Exponent in binary: 0b");
    
    int i;
    for (i = 10; i >= 0; i--) {
        printf("%d", (exponent >> i) & 1);
    }

    printf("\n");
}

int main() {
    double x = 0.7;
    print_exponent(x);

    return 0;
}
2.
#include <stdio.h>

void swap(void *ptr1, void *ptr2, size_t size) {
    char *temp = (char *)malloc(size);
    memcpy(temp, ptr1, size);
    memcpy(ptr1, ptr2, size);
    memcpy(ptr2, temp, size);
    free(temp);
}

int main() {
    int num1 = 10;
    int num2 = 20;

    printf("Before swap: num1 = %d, num2 = %d\n", num1, num2);
    swap(&num1, &num2, sizeof(int));
    printf("After swap: num1 = %d, num2 = %d\n", num1, num2);

    double pi = 3.14;
    double e = 2.71;

    printf("Before swap: pi = %f, e = %f\n", pi, e);
    swap(&pi, &e, sizeof(double));
    printf("After swap: pi = %f, e = %f\n", pi, e);

    return 0;
}
3.
#include <stdio.h>

int main() {
    int arr[] = {10, 20, 30, 40, 50};
    int size = sizeof(arr) / sizeof(arr[0]);

    int sum = 0;
    for (int i = 0; i < size; i += 2) {
        sum += arr[i];
    }

    printf("Sum of alternate elements: %d\n", sum);

    return 0;
}
4.
#include <stdio.h>

int count_set_bits(int num) {
    int count = 0;

    while (num != 0) {
        count += num & 1;
        num >>= 1;
    }

    return count;
}

int main() {
    int arr[] = {0x1, 0xF4, 0x10001};
    int size = sizeof(arr) / sizeof(arr[0]);

    int totalSetBits = 0;
    for (int i = 0; i < size; i++) {
        totalSetBits += count_set_bits(arr[i]);
    }

    printf("Total number of set bits: %d\n", totalSetBits);

    return 0;
}

level 2................
1.
#include <stdio.h>

void swap_alternate(int arr[], int size) {
    for (int i = 0; i < size - 1; i += 2) {
        int temp = arr[i];
        arr[i] = arr[i + 1];
        arr[i + 1] = temp;
    }
}

int main() {
    int arr1[] = {10, 20, 30, 40, 50};
    int size1 = sizeof(arr1) / sizeof(arr1[0]);

    printf("Before swapping: ");
    for (int i = 0; i < size1; i++) {
        printf("%d ", arr1[i]);
    }
    printf("\n");

    swap_alternate(arr1, size1);

    printf("After swapping: ");
    for (int i = 0; i < size1; i++) {
        printf("%d ", arr1[i]);
    }
    printf("\n");

    int arr2[] = {10, 20, 30, 40, 50, 60};
    int size2 = sizeof(arr2) / sizeof(arr2[0]);

    printf("Before swapping: ");
    for (int i = 0; i < size2; i++) {
        printf("%d ", arr2[i]);
    }
    printf("\n");

    swap_alternate(arr2, size2);

    printf("After swapping: ");
    for (int i = 0; i < size2; i++) {
        printf("%d ", arr2[i]);
    }
    printf("\n");

    return 0;
}
2.
#include <stdio.h>

int compare_boxes(int boxA[], int boxB[], int size) {
    int count[size];

    for (int i = 0; i < size; i++) {
        count[i] = 0;
    }

    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            if (boxA[i] == boxB[j] && count[j] == 0) {
                count[j] = 1;
                break;
            }
        }
    }

    for (int i = 0; i < size; i++) {
        if (count[i] == 0) {
            return 0;
        }
    }

    return 1;
}

int main() {
    int boxA[] = {200, 10, -90};
    int boxB[] = {-90, 200, 10};
    int size = sizeof(boxA) / sizeof(boxA[0]);

    int result = compare_boxes(boxA, boxB, size);

    if (result) {
        printf("Boxes have one-to-one mapping of items\n");
    } else {
        printf("Boxes do not have one-to-one mapping of items\n");
    }

    return 0;
}
3.

